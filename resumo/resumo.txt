============================
SISTEMA DE LOGIN E VALI DE CONTATO (LABEM)
============================
## Esse é um resumo didatico para meus colegas da faculdade, de cursos e afins, resumindo tudo o que eu fiz para aprendizado

## NÃO É UM README ou algo do tipo, apenas um arquivo txt para amigos se habituarem nas tecnologias usadas



# 1. SISTEMA DE LOGIN
## Objetivo
Permitir que usuários façam login de forma segura, validando credenciais e protegendo senhas. (Esse sistema não tem cadastro, pois é acesso único)

## Principais arquivos envolvidos
- src/models/User.js
- src/routes/auth.js
- src/app.js

## Model de Usuário (User.js) 
- username: String, obrigatório, único
- password: String, obrigatório
- O método `comparePassword` utiliza bcrypt para comparar a senha informada com o hash salvo no banco.
Lembrem-se que isso é um modelo padrao do moongose

## Rota de Login (auth.js)
- POST `/auth/login`
- Recebe: `{ username, password }`
- Valida se ambos os campos foram enviados
- Busca o usuário pelo username
- Compara a senha informada com o hash usando `comparePassword`
- Retorna STATUS CODE (LEIAM SOBRE)
  - 200: Login realizado com sucesso
  - 400: Usuário e senha são obrigatórios
  - 401: Usuário ou senha inválidos
  - 500: Erro interno

## Fluxo resumido
1. Usuário envia username e password
2. Backend busca usuário no MongoDB
3. Compara senha informada com hash
4. Retorna sucesso ou erro

## Segurança
- Senhas nunca são salvas em texto puro
- Sempre usar HTTPS em produção

## LINKS
- [Express.js - Rotas](https://expressjs.com/pt-br/guide/routing.html)
- [Mongoose - Modelos](https://mongoosejs.com/docs/models.html)
- [bcrypt - Hash de senha](https://www.npmjs.com/package/bcrypt)
- [Videozin do Diogo da RocketSeat] (https://www.youtube.com/watch?v=GAZdUyIV3ms&ab_channel=Rocketseat)
- [Topico didatico na alura](https://cursos.alura.com.br/forum/topico-objeto-no-mongoose-model-347225)



# 2. SISTEMA DE CONTATO (VALIDAÇÃO DE FORMULÁRIO)
## Objetivo
Receber mensagens do formulário de contato do site e salvar no banco de dados.

## Principais arquivos envolvidos
- src/models/ContactMessage.js
- src/routes/contact.js
- src/app.js

## Model de Mensagem de Contato (ContactMessage.js)
- nome: String, obrigatório
- email: String, obrigatório
- assunto: String, obrigatório
- mensagem: String, obrigatório
- dataEnvio: Date, preenchido automaticamente

## Rota de Contato (contact.js)
- POST `/api/contact`
- Recebe: `{ nome, email, assunto, mensagem }`
- Valida se todos os campos foram enviados
- Salva a mensagem no MongoDB
- Retorna:
  - 201: Mensagem enviada com sucesso
  - 400: Todos os campos são obrigatórios
  - 500: Erro ao enviar mensagem

## Fluxo resumido
1. Usuário preenche e envia o formulário
2. Frontend faz POST para `/api/contact`
3. Backend valida os campos
4. Salva no banco e retorna resposta clara

## Segurança
- Nunca exponha dados sensíveis no frontend
- O arquivo `.env` com a string do MongoDB está no `.gitignore` e não vai para o GitHub

## Links úteis
- [Express.js - Middleware](https://expressjs.com/pt-br/guide/using-middleware.html)
- [Mongoose - Schemas](https://mongoosejs.com/docs/guide.html)
- [MongoDB Atlas - Documentação](https://www.mongodb.com/docs/atlas/)


============================
 +++LEMBRETES!!!!!!1+++
============================
- Sempre que criar uma nova rota, adicione ao app.js ou main.js 
- Nunca envie arquivos .env para o GitHub, COLOQUE O ENV NO GITIGNOREEEEEEE
- Para testar rotas uso o httpie ou o postman

============================ 