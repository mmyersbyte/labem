# RESUMO COMPLETO DO SISTEMA LABEM

## 1. ARQUITETURA GERAL

O sistema LABEM consiste em uma aplicação web com arquitetura cliente-servidor:
- **Backend**: API RESTful em Node.js (Express) conectada a um banco MongoDB
- **Frontend**: Interface em HTML/CSS/JavaScript puro consumindo a API
- **Comunicação**: Requisições AJAX via Fetch API
- **Persistência**: MongoDB para armazenamento permanente e localStorage para cache

## 2. BACKEND (NODE.JS + EXPRESS + MONGODB)

### 2.1 Estrutura de Diretórios
- `backend/src/models` - Esquemas e modelos do MongoDB
- `backend/src/routes` - Rotas da API 
- `backend/src/middleware` - Funções de autenticação e autorização
- `backend/src/config` - Configurações de banco de dados e outras
- `backend/src/app.js` - Arquivo principal, configuração do Express

### 2.2 Modelos (MongodDB)
1. **User.js**
   - Modelo para usuários comuns (ligantes)
   - Campos: username, password (hash)
   - Método: comparePassword() para validar senhas

2. **UserAdmin.js** (implementação em andamento)
   - Modelo para administradores do sistema
   - Campos: username, password (hash)
   - Método: comparePassword() para validar senhas

3. **CreateEncontro.js**
   - Armazena encontros/reuniões com material didático
   - Campos: 
     - titulo: nome do encontro
     - paragrafo: descrição/resumo
     - slideTeorico: arquivo PDF (armazenado como Buffer)
     - materialApoio: arquivo PDF (armazenado como Buffer)
     - createdAt: data de criação

4. **Update.js**
   - Armazena atualizações/notícias do sistema
   - Campos: icone, titulo, paragrafo, createdAt

5. **ContactMessage.js**
   - Armazena mensagens de contato enviadas pelos usuários
   - Campos: nome, email, assunto, mensagem, data

### 2.3 Rotas da API

1. **auth.js** - `/auth`
   - `POST /login` - Autentica usuários comuns
   - Recebe: username e password
   - Não implementa sessão ainda, apenas valida credenciais

2. **encontros.js** - `/api/encontros`
   - `GET /` - Lista todos os encontros (sem conteúdo dos PDFs)
   - `POST /` - Cria um novo encontro (upload de PDFs)
   - `DELETE /:id` - Remove um encontro específico
   - `GET /:id/slide` - Baixa o arquivo PDF do slide teórico
   - `GET /:id/material` - Baixa o arquivo PDF do material de apoio
   - Utiliza multer para upload de arquivos

3. **updates.js** - `/api/updates`
   - `GET /` - Lista todas as atualizações/notícias
   - `POST /` - Cria uma nova atualização
   - `DELETE /:id` - Remove uma atualização
   - `PUT /:id` - Atualiza uma notícia existente

4. **contact.js** - `/api/`
   - `POST /contact` - Recebe e armazena mensagens de contato

### 2.4 Middleware de Autenticação (ainda to sofrendo pra implementar)
- **auth.js** - Middleware genérico para proteger rotas
  - Verifica existência de req.session.user
  - Retorna 401 quando não autenticado

### 2.5 Configuração Principal (app.js)
- Configuração do Express e middlewares globais
- CORS configurado para domínios específicos (labemunisul.com.br e localhost)
- Express-session configurado com cookie seguro
- Definição de rotas base
- Conexão com MongoDB (via mongoose)
- Gerenciamento de variáveis de ambiente (.env)

## 3. FRONTEND (HTML/CSS/JAVASCRIPT)

### 3.1 Páginas Principais
- Página inicial (index.html)
- Login (login.html)
- Painel do ligante (painel-do-ligante.html)
- Painel administrativo (painel-administrativo.html)

### 3.2 JavaScript (frontend/js)

1. **login.js**
   - Gerencia o formulário de login
   - Envia credenciais via fetch POST
   - Redireciona para painel-do-ligante.html após sucesso
   - Implementa toggle para mostrar/ocultar senha
   - Feedback visual durante o processo de login

2. **ligantes.js**
   - Implementação do painel do ligante
   - Carrega e exibe a lista de encontros
   - Implementa cache local com localStorage
   - Otimização: renderização instantânea do cache enquanto atualiza em segundo plano
   - Formatação visual dos cards de encontros

3. **encontrosPDF.js**
   - Gerencia o CRUD de encontros no painel administrativo
   - Possui formulário para adicionar novos encontros
   - Upload de arquivos PDF via FormData
   - Visualização em cards e botão para remoção
   - Integração com SweetAlert para confirmações
   - Tratamento de erros com feedback visual

4. **painel-admin.js** e **updates-admin.js**
   - Gerenciamento do painel administrativo
   - CRUD de atualizações/notícias
   - Interações com a API via fetch

### 3.3 Comunicação com o Backend

1. **Fetch API**: Todas as requisições usam a API fetch, com configurações:
   - `method`: GET, POST, PUT, DELETE conforme necessário
   - `headers`: Especificando 'Content-Type': 'application/json' quando necessário
   - `body`: JSON.stringify() para dados JSON ou FormData para uploads
   - Falta implementar `credentials: 'include'` para preservar cookies entre domínios

2. **Tratamento de Respostas**:
   - Verificação de `response.ok`
   - Parse de JSON com `await response.json()`
   - Tratamento de erros em blocos try/catch
   - Feedback visual para o usuário

### 3.4 Armazenamento Local (Cache)

1. **localStorage** para cache de dados:
   - Armazenamento da lista de encontros para acesso rápido
   - Uso de chaves específicas: 'encontrosLigante'
   - Fallback para requisição à API quando o cache está indisponível
   - Estratégia de atualização: mostrar cache imediatamente, atualizar em segundo plano

2. **Vantagens do Cache**:
   - Redução de requisições ao servidor
   - Melhor experiência do usuário com carregamento instantâneo
   - Possibilidade de funcionamento offline limitado
   - Menor consumo de dados

## 4. FLUXO DE DADOS COMPLETO

### 4.1 Autenticação
1. Usuário acessa login.html e insere credenciais
2. Frontend envia username/password via POST
3. Backend valida contra o modelo User
4. Em caso de sucesso, deveria estabelecer sessão (falta implementar)
5. Frontend redireciona para o painel apropriado

### 4.2 Visualização de Encontros (Ligante)
1. Usuário acessa painel-do-ligante.html
2. Frontend verifica localStorage para cache
3. Exibe dados em cache imediatamente se disponíveis
4. Paralelamente, faz requisição GET a /api/encontros
5. Atualiza a interface e o cache com novos dados
6. Quando o usuário clica em um PDF, acessa URLs específicas com ID do encontro

### 4.3 Gestão de Encontros (Admin)
1. Administrador acessa o painel administrativo
2. Frontend carrega lista atual via GET
3. Admin pode adicionar novos encontros via formulário
4. Upload multipart com FormData envia arquivos PDF
5. Feedback visual de sucesso/erro após operações
6. Operações de exclusão confirmadas via SweetAlert

## 5. MELHORIAS PENDENTES

### 5.1 Segurança
- Implementar sessões persistentes no backend com express-session
- Adicionar `credentials: 'include'` em todas as requisições fetch
- Proteger rotas administrativas com middleware específico
- Implementar CSRF tokens
- Segmentar rotas entre admin e usuários comuns

### 5.2 Funcionalidades
- Implementar logout
- Recuperação de senha
- Sistema de perfil de usuário
- Estatísticas de uso/visualização
- Notificações para novos encontros

### 5.3 UX/UI
- Feedback visual para todas as operações
- Mensagens de erro mais detalhadas
- Validação de formulários no frontend
- Responsividade em diferentes dispositivos
- Acessibilidade (WCAG)

### 5.4 Performance
- Implementar lazy loading para imagens
- Minificar arquivos CSS/JS
- Otimizar tamanho de PDFs
- Implementar paginação para grandes volumes de dados

## 6. CONCLUSÃO

O sistema LABEM apresenta uma arquitetura cliente-servidor moderna com separação clara entre frontend e backend. A aplicação utiliza MongoDB para persistência, com uma API RESTful para comunicação. 

O frontend emprega estratégias eficientes de cache local e apresenta uma interface intuitiva para dois tipos de usuários: ligantes (consumidores) e administradores (gestores). O modelo de autenticação precisa de refinamentos para implementar corretamente sessões persistentes.

A implementação atual demonstra boas práticas de desenvolvimento, como separação de responsabilidades, tratamento de erros e feedback visual. As melhorias pendentes concentram-se principalmente em segurança, experiência do usuário e performance. 