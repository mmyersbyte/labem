# RESUMO DO BACKEND DE UPDATES (LABEM)

## 1. Estrutura do Model (MongoDB)
- O model `Update` define o formato dos dados das atualizações:
  - `icone` (String): classe do ícone FontAwesome.
  - `titulo` (String): título da atualização.
  - `paragrafo` (String): descrição da atualização.
  - `createdAt` (Date): data de criação (default: agora).
- Arquivo: `backend/src/models/Update.js`
- **Exemplo:**
```js
const updateSchema = new mongoose.Schema({
  icone: String,
  titulo: String,
  paragrafo: String,
  createdAt: { type: Date, default: Date.now }
});
```

## 2. Conexão com o Banco de Dados
- O backend usa o Mongoose para conectar ao MongoDB.
- A função `connectDB` (em `backend/src/config/db.js`) faz a conexão usando a URI do `.env`.
- O app só inicia se conectar com sucesso.
- **Exemplo:**
```js
import mongoose from 'mongoose';
export default async function connectDB(uri) {
  try {
    await mongoose.connect(uri);
    console.log('MongoDB conectado com sucesso!');
  } catch (error) {
    console.error('Erro ao conectar no MongoDB:', error);
    process.exit(1);
  }
}
```

## 3. Rotas de Updates (REST API)
- Arquivo: `backend/src/routes/updates.js`
- **GET `/api/updates`**: lista todas as atualizações (ordem decrescente de data).
- **POST `/api/updates`**: cria uma nova atualização (campos obrigatórios: icone, titulo, paragrafo).
- **PUT `/api/updates/:id`**: edita uma atualização existente pelo ID.
- **DELETE `/api/updates/:id`**: remove uma atualização pelo ID.
- (Obs: Middlewares de autenticação podem ser ativados para proteger as rotas.)
- **Exemplo:**
```js
router.get('/', async (req, res) => {
  const updates = await Update.find().sort({ createdAt: -1 });
  res.status(200).json({ success: true, updates });
});
```

## 4. Integração com o Frontend
- O frontend faz um `fetch` para `/api/updates` para buscar as atualizações.
- As atualizações são renderizadas dinamicamente na seção "Últimas Atualizações" do `index.html`.
- Foi implementado cache com `localStorage` para exibir as últimas notícias instantaneamente e atualizar em segundo plano.
- Loader visual indica carregamento enquanto busca as atualizações.
- **Exemplo de fetch:**
```js
const response = await fetch('https://labem.onrender.com/api/updates');
const data = await response.json();
```

## 4.1. Como funciona o localStorage no frontend
- O `localStorage` é uma API do navegador que permite salvar dados localmente, de forma persistente, no computador do usuário.
- No projeto LABEM, ele é usado para guardar as últimas atualizações recebidas do backend.
- **Fluxo:**
  1. Ao abrir o site, o JS verifica se há atualizações salvas no `localStorage` (chave: `labem-updates`).
  2. Se houver, exibe imediatamente essas notícias (mesmo offline ou se o backend estiver lento).
  3. Em paralelo, faz um novo fetch para a API. Se houver novidades, atualiza o conteúdo e salva no `localStorage` para a próxima visita.
- **Vantagens:**
  - Carregamento instantâneo das notícias para o usuário.
  - Reduz requisições desnecessárias ao backend.
  - Funciona mesmo sem internet (desde que já tenha cache salvo).
- **Pontos de atenção:**
  - O cache pode ficar desatualizado se o usuário não recarregar a página.
  - O tamanho do `localStorage` é limitado (~5MB por domínio).
  - Dados no `localStorage` não são criptografados (não usar para informações sensíveis).
- **Exemplo:**
```js
const cached = localStorage.getItem('labem-updates');
if (cached) renderUpdates(JSON.parse(cached), updatesList);
```

## 5. CORS (Cross-Origin Resource Sharing)
- O CORS permite que o frontend (em um domínio) acesse o backend (em outro domínio).
- É fundamental para aplicações modernas que usam APIs separadas do frontend.
- No LABEM, o CORS é configurado para permitir requisições do domínio do frontend e aceitar cookies/sessão.
- **Exemplo de configuração:**
```js
import cors from 'cors';
app.use(cors({
  origin: 'https://www.labemunisul.com.br', // Domínio do frontend
  credentials: true // Permite envio de cookies/sessão
}));
```
- **Dicas:**
  - Nunca use `origin: '*'` com `credentials: true`.
  - Sempre especifique o domínio do frontend.
  - CORS deve ser configurado antes das rotas.

## 6. Autenticação e Sessão
- O backend pode proteger rotas usando sessões (express-session) ou JWT.
- No LABEM, o middleware de autenticação verifica se existe `req.session.user`.
- **Exemplo de middleware:**
```js
export default function authMiddleware(req, res, next) {
  if (req.session && req.session.user) return next();
  return res.status(401).json({ success: false, message: 'Não autorizado.' });
}
```
- **Exemplo de uso em rota protegida:**
```js
router.post('/api/updates', authMiddleware, async (req, res) => { ... });
```

## 7. Rotas Públicas e Protegidas
- Rotas públicas: qualquer usuário pode acessar (ex: GET /api/updates, POST /api/contact).
- Rotas protegidas: apenas usuários autenticados (ex: POST/PUT/DELETE de updates).
- **Exemplo de rota pública:**
```js
router.post('/contact', async (req, res) => { ... });
```

## 8. Variáveis de Ambiente
- Usadas para guardar informações sensíveis (URI do banco, segredo de sessão, etc).
- Exemplo de `.env`:
```
MONGODB_URI=...
PORT=5555
SESSION_SECRET=...
```

## 9. Dependências Principais
- `express`: framework web principal.
- `mongoose`: ODM para MongoDB.
- `express-session`: gerenciamento de sessão.
- `cors`: configuração de CORS.
- `dotenv`: variáveis de ambiente.
- `bcrypt`: hash de senha.

## 10. Fluxo Resumido
1. Admin cadastra/edita/remove atualizações pelo painel (painel-administrativo.html).
2. Backend salva/edita/remove no MongoDB via rotas REST.
3. Frontend busca as atualizações e exibe para o usuário final.

## 11. Tópicos para Estudo Futuro
- Autenticação e autorização com JWT para proteger rotas sensíveis.
- Uso de middlewares para controle de acesso (ex: apenas admin pode criar/editar/deletar).
- Validação avançada de dados (ex: Joi, celebrate).
- Otimização de performance e cache (ex: Redis, cache HTTP).
- Testes automatizados de API (ex: Jest, Supertest).
- Deploy seguro e variáveis de ambiente.
- Boas práticas de versionamento de API.

---

**Este resumo cobre o ciclo completo de updates: modelagem, rotas, integração, cache local, CORS, autenticação e dicas para evoluir o sistema!** 